{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import {useEffect, useState, ReactNode} from \"react\";\r\n\r\nconst keySwitcher = {\r\n    maxWidth: (maxWidth: number) => `(max-width: ${maxWidth}px)`,\r\n    minWidth: (minWidth: number) => `(min-width: ${minWidth}px)`,\r\n    minResolution: (minResolution: string | number) => typeof minResolution === 'string' ? `(min-resolution: ${minResolution})` : `(min-resolution: ${minResolution}dppx)`,\r\n    maxResolution: (maxResolution: number) => `(min-resolution: ${maxResolution})`,\r\n    minHeight: (minHeight: number) => `(min-height: ${minHeight}px)`,\r\n    maxHeight: (maxHeight: number) => `(max-height: ${maxHeight}px)`,\r\n    orientation: (orientation: number) => `(orientation: ${orientation})`\r\n};\r\n\r\ntype Props = {\r\n    children: ReactNode | Function,\r\n    setting: object\r\n}\r\n\r\nconst MediaQuery = ({children, ...setting}: Props) => {\r\n\r\n    const getKey = Object.keys(setting)[0]\r\n    const getValue = Object.values(setting)[0]\r\n\r\n    const isInfo = keySwitcher[getKey as keyof typeof keySwitcher](getValue);\r\n\r\n    const matches = useMediaQuery({query: isInfo})\r\n\r\n    return typeof children === 'function' ? children(matches) : matches ? children : null\r\n}\r\nexport default MediaQuery\r\n\r\n\r\nexport const useMediaQuery = (media: {query: string}) => {\r\n\r\n    let mql = window.matchMedia(media.query)\r\n\r\n    const [value, setValue] = useState(mql.matches)\r\n\r\n    const screenTest = (e: MediaQueryListEvent): void => {\r\n        if (e.matches) {\r\n            setValue(true)\r\n        }\r\n        else {\r\n            setValue(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        mql.addEventListener('change', screenTest)\r\n        return () => mql.removeEventListener('change', screenTest)\r\n    }, [])\r\n\r\n    return value\r\n}"],"names":["keySwitcher","maxWidth","minWidth","minResolution","maxResolution","minHeight","maxHeight","orientation","MediaQuery","_ref","children","setting","_objectWithoutPropertiesLoose","_excluded","getKey","Object","keys","getValue","values","isInfo","matches","useMediaQuery","query","media","mql","window","matchMedia","value","setValue","useState","screenTest","e","useEffect","addEventListener","removeEventListener"],"mappings":"qEAEiBA,EAAG,CAChBC,SAAWA,GAAqB,eAAeA,OAC/CC,SAAWA,GAAqB,eAAeA,OAC/CC,cAAgBA,GAA4D,iBAAzBA,sBAAwDA,KAAuC,oBAAAA,SAClJC,cAAgBA,GAA0B,oBAAoBA,KAC9DC,UAAYA,GAAsB,gBAAgBA,OAClDC,UAAYA,GAAsB,gBAAgBA,OAClDC,YAAcA,GAAwB,iBAAiBA,MAQrDC,EAAaC,IAAC,IAAAC,SAACA,GAAaC,EAAAA,oIAE9BC,CAAAH,EAAAI,GAAA,MAAYC,EAAGC,OAAOC,KAAKL,GAAS,GAC9BM,EAAWF,OAAOG,OAAOP,GAAS,GAElCQ,EAASnB,EAAYc,GAAoCG,GAEzDG,EAAUC,EAAc,CAACC,MAAOH,IAEtC,MAA2B,qBAAaT,EAASU,GAAWA,EAAUV,EAAW,MAKxEW,EAAiBE,IAE1B,IAAIC,EAAMC,OAAOC,WAAWH,EAAMD,OAElC,MAAOK,EAAOC,GAAYC,EAASL,EAAIJ,SAEjCU,EAAcC,IAEZH,IADAG,EAAEX,QAKL,EAQL,OALAY,EAAU,KACNR,EAAIS,iBAAiB,SAAUH,GACxB,IAAMN,EAAIU,oBAAoB,SAAUJ,IAChD,IAEIH"}